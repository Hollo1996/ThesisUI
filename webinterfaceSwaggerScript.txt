swagger: "2.0"
info:
  description: "This is the main server of QLM's DRP system"
  version: "1.0.0"
  title: "DRP"
  contact:
    email: "akos.hollo-szabo@qlndc.hu"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "waprom.drp"
tags:
- name: "setup"
  description: "Setup and options of optimisation"
  externalDocs:
    description: "Find out more"
    url: "http://drp.io"
schemes:
- "https"

paths:
  /setup/salesman:
    post:
      tags:
        - "setup"
      summary: "Send salesman"
      description: "Give salesman of volume, weight, time with position for next optimisation runs"
      operationId: "addSalesman"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Setup parameters"
        required: true
        schema:
          $ref: "#/definitions/Salesman"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
    delete:
      tags:
        - "setup"
      summary: "Delete salesman"
      description: "delete salesman specified by name"
      operationId: "removeSalesman"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "identifier"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
            
  /setup/objective:
    post:
      tags:
        - "setup"
      summary: "Send objectives"
      description: "Give objectives of volume, weight, time with position for next optimisation runs"
      operationId: "addObjective"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Setup parameters"
        required: true
        schema:
          $ref: "#/definitions/Objective"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
    delete:
      tags:
        - "setup"
      summary: "Delete objective"
      description: "delete objective specified by name"
      operationId: "removeObjective"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "identifier"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
                
  /setup/task:
    post:
      tags:
        - "setup"
      summary: "Define task"
      description: "Define task parameters for next optimisation run"
      operationId: "defineTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Task parameters"
        required: true
        schema:
          $ref: '#/definitions/Task'
      responses:
        "405":
          description: "Invalid setup"
        "200":
          description: "successful operation"
          schema:
            type: "string"
    get:
      tags:
        - "setup"
      summary: "Load task"
      description: "Load task with a name maching the parameter"
      operationId: "loadTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Task name"
        required: true
        schema:
          type: "string"
      responses:
        "405":
          description: "Invalid task"
        "200":
          description: "successful operation"
          schema:
            $ref: '#/definitions/Task'
    put:
      tags:
        - "setup"
      summary: "Save task"
      description: "Save defined task by name"
      operationId: "saveTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Task name"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
  /setup/task/list:
    get:
      tags:
        - "setup"
      summary: "List names of tasks"
      description: "List names of saved tasks"
      operationId: "listTaskNames"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "405":
          description: "Invalid task"
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
          
  /setup/setting:
    post:
      tags:
        - "setup"
      summary: "Define setting"
      description: "Define setting parameters for next optimisation run"
      operationId: "defineSetting"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Setting parameters"
        required: true
        schema:
          $ref: '#/definitions/Setting'
      responses:
        "405":
          description: "Invalid setting"
        "200":
          description: "successful operation"
          schema:
            type: "string"
    get:
      tags:
        - "setup"
      summary: "Load setting"
      description: "Load setting with a name maching the parameter"
      operationId: "loadSetting"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Setting name"
        required: true
        schema:
          type: "string"
      responses:
        "405":
          description: "Invalid setting"
        "200":
          description: "successful operation"
          schema:
            $ref: '#/definitions/Setting'
    put:
      tags:
        - "setup"
      summary: "Save setting"
      description: "Save defined setting by name"
      operationId: "saveSetting"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Name"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
  /setup/setting/list:
    get:
      tags:
        - "setup"
      summary: "List names of settings"
      description: "List names of saved settings"
      operationId: "listSettingsNames"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "405":
          description: "Invalid task"
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
          
  /setup/setting/algorithm:
    get:
      tags:
        - "setup"
      summary: "List available algorithms"
      description: "List available algorithms to choose from"
      operationId: "listAlgorithms"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "405":
          description: "Invalid setting"
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
          
  /lifecycle/prepare:
    post:
      tags:
      - "lifecicle"
      summary: "prepare optimisation"
      description: "prepare seted up optimisation"
      operationId: "prepare"
      responses:
        "200":
          description: "successfull prepare"
        "405":
          description: "invalid in current state"
              
  /lifecycle/start:
    post:
      tags:
      - "lifecicle"
      summary: "start optimisation"
      description: "start prepared optimisation"
      operationId: "start"
      responses:
        "200":
          description: "successfull start"
        "405":
          description: "invalid in current state"
              
  /lifecycle/resume:
    post:
      tags:
      - "lifecicle"
      summary: "resume optimisation"
      description: "resume started optimisation"
      operationId: "resume"
      responses:
        "200":
          description: "successfull resume"
        "405":
          description: "invalid in current state"
              
  /lifecycle/pause:
    post:
      tags:
      - "lifecicle"
      summary: "pause optimisation"
      description: "pause automated optimisation"
      operationId: "pause"
      responses:
        "200":
          description: "successfull pause"
        "405":
          description: "invalid in current state"
              
  /lifecycle/stop:
    post:
      tags:
      - "lifecicle"
      summary: "stop optimisation"
      description: "stop running optimisation"
      operationId: "stop"
      responses:
        "200":
          description: "successfull stop"
        "405":
          description: "invalid in current state"
              
  /lifecycle/clean:
    post:
      tags:
      - "lifecicle"
      summary: "clean generated data"
      description: "clean data generated to prepare for the optimisation"
      operationId: "clean"
      responses:
        "200":
          description: "successfull clean"
        "405":
          description: "invalid in current state"
              
  /lifecycle/step:
    post:
      tags:
      - "lifecicle"
      summary: "make one iteration"
      description: "make one iteration of already started algorithm"
      operationId: "step"
      responses:
        "200":
          description: "successfull step"
          schema:
            $ref: '#/definitions/Result'
          
        "405":
          description: "invalid in current state"
              
  /lifecycle/cycle:
    post:
      tags:
      - "lifecicle"
      summary: "make one cycle"
      description: "make one cycle of already started algorithm"
      operationId: "cycle"
      responses:
        "200":
          description: "successfull cycle"
          schema:
            $ref: '#/definitions/Result'
        "405":
          description: "invalid in current state"
          
  /update/rout/{fromLat}/{fromLong}/{toLat}/{toLong}:
    get:
      tags:
        - "update"
      summary: "get rout between locations"
      description: "get rout between two locations specified by GPS coordinates"
      operationId: "getRoutBetween"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "fromLat"
        required: true
        description: "lattitude of GPS coords of source location"
        type: "number"
      - in: "path"
        name: "fromLong"
        required: true
        description: "longitude of GPS coords of source location"
        type: "number"
      - in: "path"
        name: "toLat"
        required: true
        description: "lattitude of GPS coords of target location"
        type: "number"
      - in: "path"
        name: "toLong"
        required: true
        description: "longitude of GPS coords of target location"
        type: "number"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Edge"
          
  /update/progress:
    get:
      tags:
        - "update"
      summary: "get run progress of running algorithm"
      description: "get runtime and iteration of running algorithm"
      operationId: "getProgress"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: '#/definitions/Progress'
          
  /update/result:
    get:
      tags:
        - "update"
      summary: "get actual result"
      description: "get actual result of startes algorithm"
      operationId: "getResult"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: '#/definitions/Result'
    
    
    
definitions:
  Progress:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      iteration:
        type: "number"
      runtime_Second:
        type: "number"
    required: 
      - id
      - name
      - iteration
      - runtime_Second
      
  Result:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      bestRout:
        type: "array"
        items:
          $ref: "#/definitions/GpsArray"
      maxCost_Euro:
        type: "number"
      minCost_Euro:
        type: "number"
      bestCost_Euro:
        type: "number"
    required: 
      - id
      - name
      - bestRout
      - maxCost_Euro
      - minCost_Euro
      - bestCost_Euro
    
      
  Setting:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      iterLimit:
        type: "number"
      timeLimit_Second:
        type: "number"
      algorithm:
        type: "string"
    required: 
      - id
      - name
      - iterLimit
      - timeLimit_Second
      - algorithm
  
  Task:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      salesmen:
        type: "array"
        items:
          $ref: "#/definitions/Salesman"
      costGraph:
        $ref: '#/definitions/Graph'
    required: 
      - id
      - name
      - center
      - salesmen
      - costGraph
      
  Graph:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      center:
        $ref: "#/definitions/Gps"
      objectives:
        type: "array"
        items:
          $ref: "#/definitions/Objective"
      edgesBetween:
        type: "array"
        items:
          $ref: "#/definitions/EdgeArray"
      edgesFromCenter:
        type: "array"
        items:
          $ref: "#/definitions/Edge"
      edgesToCenter:
        type: "array"
        items:
          $ref: "#/definitions/Edge"
    required: 
      - id
      - name
      - center
      - objectives
      - edgesBetween
      - edgesFromCenter
      - edgesToCenter
      
  Edge:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      orderInOwner:
        type: "integer"
      length_Meter:
        type: "number"
      rout:
        type: "array"
        items:
          $ref: "#/definitions/Gps"
    required: 
      - id
      - orderInOwner
      - name
      - length_Meter
      - rout
      
  EdgeArray:
    type: "object"
    properties:
      id:
        type: "string"
      orderInOwner:
        type: "integer"
      values:
        type: "array"
        items:
          $ref: "#/definitions/Edge"
    required: 
      - id
      - orderInOwner
      - values
  
  Objective:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      orderInOwner:
        type: "integer"
      location:
          $ref: "#/definitions/Gps"
      time_Second:
        type: "number"
      volume_Stere:
        type: "number"
      weight_Gramm:
        type: "number"
    required: 
      - id
      - name
      - orderInOwner
      - location
      - time_Second
      - volume_Stere
      - weight_Gramm
        
  Gps:
    type: "object"
    properties:
      id:
        type: "string"
      orderInOwner:
        type: "integer"
      lattitude: 
        type: "number"
      longitude: 
        type: "number"
    required: 
      - id
      - orderInOwner
      - lattitude
      - longitude
        
  GpsArray:
    type: "object"
    properties:
      id:
        type: "string"
      orderInOwner:
        type: "integer"
      values:
        type: "array"
        items:
          $ref: "#/definitions/Gps"
    required: 
      - id
      - orderInOwner
      - values
  
  Salesman:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      orderInOwner:
        type: "integer"
      workTime_SecondPerDay:
        type: "number"
      volumeCapacity_Stere:
        type: "number"
      weightCapacity_Gramm:
        type: "number"
      vechicleSpeed_MeterPerSecond:
        type: "number"
      payment_EuroPerSecond:
        type: "number"
      fuelConsuption_LiterPerMeter:
        type: "number"
      fuelPrice_EuroPerLiter:
        type: "number"
      basePrice_Euro:
        type: "number"
    required: 
      - id
      - name
      - orderInOwner
      - workTime_SecondPerDay
      - volumeCapacity_Stere
      - weightCapacity_Gramm
      - vechicleSpeed_MeterPerSecond
      - payment_EuroPerSecond
      - fuelConsuption_LiterPerMeter
      - fuelPrice_EuroPerLiter
      - basePrice_Euro
      
      