{"version":3,"sources":["typescript/model/proxy.ts","typescript/model/eventProducer.ts","typescript/ui/textInput.tsx","typescript/ui/login.tsx","typescript/ui/textInputAndButton.tsx","typescript/ui/messageCard.tsx","typescript/ui/rightPane.tsx","typescript/ui/conversationCard.tsx","typescript/ui/leftPane.tsx","typescript/ui/main.tsx","typescript/App.tsx","typescript/serviceWorker.ts","typescript/index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","listener","obj","splice","findIndex","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","href","onClick","preventDefault","src","width","key","onEmailChange","sendPacket","staySignedIn","TextInputAndButton","textInput","React","createRef","current","ref","buttonContent","MessageCard","own","content","Date","timeStamp","toLocaleTimeString","PureComponent","RightPane","m","forceUpdate","removeAllEventListener","text","referenceTo","contentType","onBack","name","map","id","senderId","user","onSend","ConversationCard","lastMessage","length","selected","onSelect","LeftPane","firstMessage","c","tag","sendContactRequest","selectedConversation","Main","undefined","App","showLogin","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.16fb03f0.chunk.js","sourcesContent":["import { OutgoingPacket, InboxDto, IncomingPacket } from \"./chat\";\r\nimport { EventProducer } from \"./eventProducer\";\r\nimport { ProxyEventMap } from \"./proxyEventMap\";\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap>\r\n{\r\n    private ws: WebSocket;\r\n    inbox: InboxDto | null = null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\");\r\n        //this.ws.addEventListener(\"open\", () => {});\r\n        this.ws.addEventListener(\"message\", e => {\r\n            let p = <IncomingPacket>JSON.parse(e.data);\r\n            switch (p.type) {\r\n                case \"error\":\r\n                    alert(p.message);\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch(\"login\");\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\r\n                    this.dispatch(\"message\", cid, p.message);\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push(p.conversation);\r\n                    this.dispatch(\"conversation\", p.conversation.channelId);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    sendPacket(packet: OutgoingPacket) {\r\n        this.ws.send(JSON.stringify(packet));\r\n    }\r\n}\r\n\r\nexport var proxy = new Proxy();","export class EventProducer<M> {\r\n    private listeners: { type: keyof M, listener:any, obj?: Object }[] = [];\r\n\r\n    addEventListener<K extends keyof M>( type: K, listener: M[ K ], obj?: Object ) {\r\n        this.listeners.push({ type, listener, obj });\r\n    }\r\n\r\n    removeEventListener<K extends keyof M>(type: K, listener: M[ K ]) {\r\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\r\n    }\r\n    protected dispatch<K extends keyof M>(type: K, ...args:any) {\r\n        for (let listener of this.listeners.filter(x => x.type === type))\r\n            listener.listener.call(listener.obj, ...args);\r\n    }\r\n\r\n    removeAllEventListener(obj: Object) {\r\n        if (!obj)\r\n            throw new Error(\"Must specify object\");\r\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\r\n    }\r\n\r\n}\r\n","import { TextInputOptions } from \"./textInputOptions\";\r\nimport { Component } from \"react\";\r\nimport React from \"react\";\r\nimport '../../css/textInput.css';\r\n\r\n\r\nexport class TextInput extends Component<TextInputOptions>{\r\n    state = { value: this.props.value, focus: false };\r\n\r\n    render() {\r\n        let attrs = {} as any;\r\n        if (this.props.autofocus)\r\n            attrs.autoFocus = true;\r\n        if (this.props.onEnter)\r\n            attrs.onKeyDown = (e: { keyCode: number; }) => {\r\n                if (e.keyCode === 13)\r\n                    this.props.onEnter!();\r\n            };\r\n\r\n        return (\r\n            <div className=\"text-input\">\r\n                <input type={this.props.type ?? \"text\"} value={this.state.value}\r\n                    onChange={e => {\r\n                        this.setState({ value: e.target.value });\r\n                        this.props.onChange?.(e.target.value);\r\n                    }}\r\n                    onBlur={() => this.setState({ focus: false })}\r\n                    onFocus={() => this.setState({ focus: true })}\r\n                    { ...attrs } \r\n                />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\r\n                    {this.props.placeholder}\r\n                </label>\r\n            </div>);\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { proxy } from '../model/proxy';\r\nimport { TextInput } from './textInput';\r\n\r\n\r\nexport class Login extends Component {\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login\">\r\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\r\n                    <a href=\"\" onClick={e => {\r\n                        e.preventDefault();\r\n                        this.setState(state => ({ register: !this.state.register }));\r\n                        // pass a function instead of object\r\n                    }}>\r\n                        {this.state.register ? \"Login\" : \"Register\"}\r\n                    </a>\r\n                </p>\r\n\r\n                <img src=\"logo512.png\" width=\"256\" />\r\n                {this.state.register &&\r\n                    <TextInput\r\n                        key={ this.state.displayName } \r\n                        type=\"text\"\r\n                        placeholder=\"Display Name (Agent Smith)\"\r\n                        value={this.state.displayName}\r\n                        onChange={e => this.setState({ displayName: e })}\r\n                        onEnter={() => this.onClick()}\r\n                        autofocus={true}\r\n                    />\r\n                }\r\n                <TextInput\r\n                    type=\"email\"\r\n                    placeholder=\"Email (someone@example.com)\"\r\n                    value={this.state.email}\r\n                    onChange={e => this.onEmailChange(e)}\r\n                    onEnter={() => this.onClick()}\r\n                    autofocus={true}\r\n                />\r\n                <TextInput\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={this.state.password}\r\n                    onChange={e => this.setState({ password: e })}\r\n                    onEnter={() => this.onClick()}\r\n                    autofocus={true}\r\n                />\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.state.register ? \"Register\" : \"Login\"}\r\n                </button>\r\n\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n            </div>);\r\n    }\r\n\r\n    onClick() {\r\n        if (this.state.register)\r\n            proxy.sendPacket({\r\n                type: \"register\", email: this.state.email, password: this.state.password,\r\n                displayName: this.state.displayName, staySignedIn: false\r\n            });\r\n        else\r\n            proxy.sendPacket({\r\n                type: \"login\", email: this.state.email, password: this.state.password,\r\n                staySignedIn: false\r\n            });\r\n    }\r\n\r\n    onEmailChange(value: string) {\r\n        if (value == \"COIGBV\") {\r\n            this.setState({ email: \"COIGBV\", displayName: \"Akos\" })\r\n        }\r\n        else {\r\n            this.setState({ email: value })\r\n        }\r\n    }\r\n\r\n}","import { TextInputAndButtonOptions } from \"./textInputAndButtonOptions\";\r\nimport { Component } from \"react\";\r\nimport React from \"react\";\r\nimport { TextInput } from \"./textInput\";\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n\r\n    onClick() {\r\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\r\n            this.textInput.current?.setState({ value: \"\" });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput {...this.props} ref={this.textInput} onEnter={() => this.onClick()} />\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.props.buttonContent}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import { PureComponent } from \"react\";\r\nimport { MessageDto } from \"../model/chat\";\r\nimport React from \"react\";\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    render() {\r\n        return (\r\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{this.props.message.content}</span>\r\n                    <span className=\"time\">\r\n                        {new Date(this.props.message.timeStamp).toLocaleTimeString()}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import { proxy } from \"../model/proxy\";\r\nimport { Component } from \"react\";\r\nimport { ConversationDto } from \"../model/chat\";\r\nimport React from \"react\";\r\nimport { TextInputAndButton } from \"./textInputAndButton\";\r\nimport { MessageCard } from \"./messageCard\";\r\nimport '../../css/index.css';\r\n\r\nexport class RightPane extends Component<{\r\n    conversation?: ConversationDto, onBack: () => void\r\n}> {\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation?.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n    onSend(text: string) {\r\n        proxy.sendPacket({\r\n            type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0\r\n            , contentType: 0, content: \"C: \" + text\r\n        });\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"right-pane column\">\r\n                {this.props.conversation &&\r\n                    <>\r\n                        <div className=\"conversation-header row\">\r\n                            <button type=\"button\" className=\"only-narrow\"\r\n                                onClick={() => this.props.onBack()}>Back</button>\r\n                            <p>{this.props.conversation?.name}</p>\r\n                        </div>\r\n                        <div className=\"messages\">\r\n                            {this.props.conversation?.lastMessages.map(x =>\r\n                                <MessageCard key={x.id} message={x}\r\n                                    own={x.senderId === proxy.inbox?.user.id} />)}\r\n                        </div>\r\n                        <div className=\"send-message row\">\r\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\r\n                                buttonContent=\"Send\" onClick={x => this.onSend(x)} />\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import { Component } from \"react\";\r\nimport { ConversationDto } from \"../model/chat\";\r\nimport React from \"react\";\r\nimport { proxy } from \"../model/proxy\";\r\n\r\nexport class ConversationCard extends Component<{\r\n    conversation: ConversationDto,\r\n    selected: boolean,\r\n    onSelect: () => void\r\n}>\r\n{\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n    \r\n    render() {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n            this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\r\n        return (\r\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\r\n                onClick={() => this.props.onSelect()}>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\r\n                    <span className=\"time\">\r\n                        {lastMessage && new Date(lastMessage.timeStamp).toLocaleTimeString()}\r\n                    </span>\r\n                </div>\r\n                <span className=\"last-message\">{lastMessage?.content}</span>\r\n            </div>\r\n        );\r\n    }\r\n}","import { Component } from \"react\";\r\nimport { InboxDto, ConversationDto } from \"../model/chat\";\r\nimport React from \"react\";\r\nimport { TextInputAndButton } from \"./textInputAndButton\";\r\nimport { proxy } from \"../model/proxy\";\r\nimport { ConversationCard } from \"./conversationCard\";\r\n\r\nexport class LeftPane extends Component<{\r\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\r\n    onSelect: (c: ConversationDto) => void\r\n}>\r\n{\r\n\r\n    sendContactRequest(email: string) {\r\n        proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\r\n        return true;\r\n    }\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"left-pane\">\r\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\r\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n                    buttonContent=\"Inv\"\r\n                    onClick={text => this.sendContactRequest(text)} />\r\n                <div className=\"conversations\">\r\n                    {this.props.inbox.conversations.map(x =>\r\n                        <ConversationCard\r\n                            key={x.channelId}\r\n                            conversation={x}\r\n                            selected={x === this.props.selectedConversation}\r\n                            onSelect={() => this.props.onSelect(x)} />)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import { ConversationDto } from \"../model/chat\";\r\nimport React, { Component } from \"react\";\r\nimport { proxy } from \"../model/proxy\";\r\nimport { RightPane } from \"./rightPane\";\r\nimport { LeftPane } from \"./leftPane\";\r\n\r\nexport class Main extends Component {\r\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\r\n\r\n    render() {\r\n        let className = \"main row \" + (this.state.selectedConversation ? \"right\" : \"left\");\r\n        return (\r\n            <div className={className}>\r\n                <LeftPane\r\n                    inbox={proxy.inbox!}\r\n                    selectedConversation={this.state.selectedConversation}\r\n                    onSelect={c => this.setState({ selectedConversation: c })} />\r\n                <RightPane conversation={this.state.selectedConversation}\r\n                    onBack={() => this.setState({ selectedConversation: undefined })} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Login } from './ui/login';\r\nimport { proxy } from './model/proxy';\r\nimport { Main } from './ui/main';\r\n\r\nexport default class App extends Component {\r\n\r\n  state = { showLogin: true };\r\n  componentDidMount() {\r\n    proxy.addEventListener(\"login\", () => this.setState({ showLogin: false }));\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        { this.state.showLogin ? <Login /> : <Main /> }\r\n      </div>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}